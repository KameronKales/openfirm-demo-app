/**
 * Openfirm API
 * This is a sandbox server.  You can find out more about Openfirm [here](/docs).  For this sample, you can use the api key `test` to test the authorization filters.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: kameronkales@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';
import MerchantQueue from '../model/MerchantQueue';
import QueueTransaction from '../model/QueueTransaction';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 0.0.1
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the classifyMerchantByTransaction operation.
     * @callback module:api/TransactionsApi~classifyMerchantByTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify Transaction by Merchant
     * Returns a single merchant
     * @param {String} merchant Merchant name to match
     * @param {module:api/TransactionsApi~classifyMerchantByTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    classifyMerchantByTransaction(merchant, callback) {
      let postBody = null;
      // verify the required parameter 'merchant' is set
      if (merchant === undefined || merchant === null) {
        throw new Error("Missing the required parameter 'merchant' when calling classifyMerchantByTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant': merchant
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/v1/transactions/classify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queueTransaction operation.
     * @callback module:api/TransactionsApi~queueTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify Transaction by Merchant
     * Returns a single merchant
     * @param {module:model/MerchantQueue} merchantQueue The merchant to identify
     * @param {module:api/TransactionsApi~queueTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueTransaction}
     */
    queueTransaction(merchantQueue, callback) {
      let postBody = merchantQueue;
      // verify the required parameter 'merchantQueue' is set
      if (merchantQueue === undefined || merchantQueue === null) {
        throw new Error("Missing the required parameter 'merchantQueue' when calling queueTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueueTransaction;
      return this.apiClient.callApi(
        '/v1/transactions/classify/queue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
